package svg

// generated by hasher -file hash.go -type Hash; DO NOT EDIT, except for adding more constants to the list and rerun go generate

// uses github.com/tdewolff/hasher
//go:generate hasher -type=Hash -file=hash.go

// Hash defines perfect hashes for a predefined list of strings
type Hash uint32

// Unique hash definitions to be used instead of strings
const (
	A                            Hash = 0x1d01  // a
	Alignment_Baseline           Hash = 0x2912  // alignment-baseline
	Baseline_Shift               Hash = 0x330e  // baseline-shift
	Buffered_Rendering           Hash = 0x12    // buffered-rendering
	Clip                         Hash = 0x4d04  // clip
	Clip_Path                    Hash = 0x4d09  // clip-path
	Clip_Rule                    Hash = 0x6909  // clip-rule
	Color                        Hash = 0xbc05  // color
	Color_Interpolation          Hash = 0xbc13  // color-interpolation
	Color_Interpolation_Filters  Hash = 0xbc1b  // color-interpolation-filters
	Color_Profile                Hash = 0x1cc0d // color-profile
	Color_Rendering              Hash = 0x2050f // color-rendering
	ContentStyleType             Hash = 0x7e10  // contentStyleType
	Cursor                       Hash = 0xa506  // cursor
	D                            Hash = 0x701   // d
	Defs                         Hash = 0x31b04 // defs
	Direction                    Hash = 0x2c109 // direction
	Display                      Hash = 0x9d07  // display
	Dominant_Baseline            Hash = 0x16711 // dominant-baseline
	Enable_Background            Hash = 0x8d11  // enable-background
	Fill                         Hash = 0xad04  // fill
	Fill_Opacity                 Hash = 0x2ef0c // fill-opacity
	Fill_Rule                    Hash = 0xad09  // fill-rule
	Filter                       Hash = 0xd006  // filter
	Flood_Color                  Hash = 0xb60b  // flood-color
	Flood_Opacity                Hash = 0xe50d  // flood-opacity
	Font                         Hash = 0xf204  // font
	Font_Family                  Hash = 0xf20b  // font-family
	Font_Size                    Hash = 0xfd09  // font-size
	Font_Size_Adjust             Hash = 0xfd10  // font-size-adjust
	Font_Stretch                 Hash = 0x1150c // font-stretch
	Font_Style                   Hash = 0x1210a // font-style
	Font_Variant                 Hash = 0x12b0c // font-variant
	Font_Weight                  Hash = 0x1440b // font-weight
	G                            Hash = 0x1101  // g
	Glyph_Orientation_Horizontal Hash = 0x1a81c // glyph-orientation-horizontal
	Glyph_Orientation_Vertical   Hash = 0x111a  // glyph-orientation-vertical
	Height                       Hash = 0x5506  // height
	Image_Rendering              Hash = 0x14f0f // image-rendering
	Kerning                      Hash = 0x19107 // kerning
	Letter_Spacing               Hash = 0x700e  // letter-spacing
	Lighting_Color               Hash = 0x1c30e // lighting-color
	Line                         Hash = 0x3704  // line
	Marker                       Hash = 0x15e06 // marker
	Marker_End                   Hash = 0x15e0a // marker-end
	Marker_Mid                   Hash = 0x1780a // marker-mid
	Marker_Start                 Hash = 0x1820c // marker-start
	Mask                         Hash = 0x18e04 // mask
	Metadata                     Hash = 0x19808 // metadata
	Missing_Glyph                Hash = 0x1a00d // missing-glyph
	Opacity                      Hash = 0xeb07  // opacity
	Overflow                     Hash = 0x1d908 // overflow
	Paint_Order                  Hash = 0x2630b // paint-order
	Path                         Hash = 0x5204  // path
	Pattern                      Hash = 0x1eb07 // pattern
	Pointer_Events               Hash = 0x1f20e // pointer-events
	Points                       Hash = 0x21406 // points
	Polygon                      Hash = 0x22607 // polygon
	Polyline                     Hash = 0x22d08 // polyline
	Rect                         Hash = 0x2c304 // rect
	Rx                           Hash = 0x4a02  // rx
	Ry                           Hash = 0xaa02  // ry
	Shape_Rendering              Hash = 0xd60f  // shape-rendering
	Solid_Color                  Hash = 0x1ff0b // solid-color
	Solid_Opacity                Hash = 0x2190d // solid-opacity
	Stop_Color                   Hash = 0x10b0a // stop-color
	Stop_Opacity                 Hash = 0x31e0c // stop-opacity
	Stroke                       Hash = 0x23506 // stroke
	Stroke_Dasharray             Hash = 0x23510 // stroke-dasharray
	Stroke_Dashoffset            Hash = 0x24511 // stroke-dashoffset
	Stroke_Linecap               Hash = 0x2560e // stroke-linecap
	Stroke_Linejoin              Hash = 0x26e0f // stroke-linejoin
	Stroke_Miterlimit            Hash = 0x27d11 // stroke-miterlimit
	Stroke_Opacity               Hash = 0x28e0e // stroke-opacity
	Stroke_Width                 Hash = 0x29c0c // stroke-width
	Style                        Hash = 0x12605 // style
	Svg                          Hash = 0x2a803 // svg
	Switch                       Hash = 0x2ab06 // switch
	Symbol                       Hash = 0x2b106 // symbol
	Text_Anchor                  Hash = 0x400b  // text-anchor
	Text_Decoration              Hash = 0x5a0f  // text-decoration
	Text_Rendering               Hash = 0x1360e // text-rendering
	Unicode_Bidi                 Hash = 0x2b70c // unicode-bidi
	Vector_Effect                Hash = 0x2ca0d // vector-effect
	Version                      Hash = 0x2d707 // version
	ViewBox                      Hash = 0x2de07 // viewBox
	Viewport_Fill                Hash = 0x2e60d // viewport-fill
	Viewport_Fill_Opacity        Hash = 0x2e615 // viewport-fill-opacity
	Visibility                   Hash = 0x2fb0a // visibility
	White_Space                  Hash = 0x1e00b // white-space
	Width                        Hash = 0x2a305 // width
	Word_Spacing                 Hash = 0x3050c // word-spacing
	Writing_Mode                 Hash = 0x3110c // writing-mode
	X                            Hash = 0x4201  // x
	X1                           Hash = 0x4b02  // x1
	X2                           Hash = 0x2e402 // x2
	Y                            Hash = 0x1301  // y
	Y1                           Hash = 0xa302  // y1
	Y2                           Hash = 0xab02  // y2
)

// String returns the hash' name.
func (i Hash) String() string {
	start := uint32(i >> 8)
	n := uint32(i & 0xff)
	if start+n > uint32(len(_Hash_text)) {
		return ""
	}
	return _Hash_text[start : start+n]
}

// ToHash returns the hash whose name is s. It returns zero if there is no
// such hash. It is case sensitive.
func ToHash(s []byte) Hash {
	if len(s) == 0 || len(s) > _Hash_maxLen {
		return 0
	}
	h := uint32(_Hash_hash0)
	for i := 0; i < len(s); i++ {
		h ^= uint32(s[i])
		h *= 16777619
	}
	if i := _Hash_table[h&uint32(len(_Hash_table)-1)]; int(i&0xff) == len(s) {
		t := _Hash_text[i>>8 : i>>8+i&0xff]
		for i := 0; i < len(s); i++ {
			if t[i] != s[i] {
				goto NEXT
			}
		}
		return i
	}
NEXT:
	if i := _Hash_table[(h>>16)&uint32(len(_Hash_table)-1)]; int(i&0xff) == len(s) {
		t := _Hash_text[i>>8 : i>>8+i&0xff]
		for i := 0; i < len(s); i++ {
			if t[i] != s[i] {
				return 0
			}
		}
		return i
	}
	return 0
}

const _Hash_hash0 = 0xf7ffa4d4
const _Hash_maxLen = 28
const _Hash_text = "buffered-renderinglyph-orientation-verticalignment-baseline-" +
	"shiftext-anchorx1clip-patheightext-decorationclip-ruletter-s" +
	"pacingcontentStyleTypenable-backgroundisplay1cursory2fill-ru" +
	"leflood-color-interpolation-filtershape-renderingflood-opaci" +
	"tyfont-familyfont-size-adjustop-colorfont-stretchfont-stylef" +
	"ont-variantext-renderingfont-weightimage-renderingmarker-end" +
	"ominant-baselinemarker-midmarker-startmaskerningmetadatamiss" +
	"ing-glyph-orientation-horizontalighting-color-profileoverflo" +
	"white-spacepatternpointer-eventsolid-color-renderingpointsol" +
	"id-opacitypolygonpolylinestroke-dasharraystroke-dashoffsetst" +
	"roke-linecapaint-orderstroke-linejoinstroke-miterlimitstroke" +
	"-opacitystroke-widthsvgswitchsymbolunicode-bidirectionvector" +
	"-effectversionviewBox2viewport-fill-opacityvisibilityword-sp" +
	"acingwriting-modefstop-opacity"

var _Hash_table = [1 << 7]Hash{
	0x0:  0x16711, // dominant-baseline
	0x1:  0x19808, // metadata
	0x2:  0xfd10,  // font-size-adjust
	0x3:  0xf204,  // font
	0x4:  0x2a305, // width
	0x5:  0x31b04, // defs
	0x6:  0x400b,  // text-anchor
	0x7:  0x2ca0d, // vector-effect
	0x8:  0x5204,  // path
	0x9:  0x1210a, // font-style
	0xa:  0x2a803, // svg
	0xb:  0x27d11, // stroke-miterlimit
	0xc:  0x1a81c, // glyph-orientation-horizontal
	0xd:  0x15e06, // marker
	0xe:  0x15e0a, // marker-end
	0xf:  0x12b0c, // font-variant
	0x10: 0x2b106, // symbol
	0x11: 0x1f20e, // pointer-events
	0x12: 0xa302,  // y1
	0x13: 0x1a00d, // missing-glyph
	0x14: 0xe50d,  // flood-opacity
	0x16: 0x3110c, // writing-mode
	0x18: 0x3050c, // word-spacing
	0x1b: 0xa506,  // cursor
	0x1d: 0x4a02,  // rx
	0x1e: 0x31e0c, // stop-opacity
	0x21: 0xd006,  // filter
	0x22: 0x2c304, // rect
	0x25: 0x2b70c, // unicode-bidi
	0x26: 0x8d11,  // enable-background
	0x27: 0x5506,  // height
	0x28: 0x23510, // stroke-dasharray
	0x2a: 0xbc05,  // color
	0x2c: 0x2e402, // x2
	0x2e: 0x4d09,  // clip-path
	0x2f: 0x4b02,  // x1
	0x30: 0x22d08, // polyline
	0x31: 0xaa02,  // ry
	0x32: 0x1d908, // overflow
	0x33: 0x18e04, // mask
	0x34: 0x2e60d, // viewport-fill
	0x35: 0x2ef0c, // fill-opacity
	0x36: 0x12,    // buffered-rendering
	0x38: 0xbc1b,  // color-interpolation-filters
	0x39: 0x1360e, // text-rendering
	0x3a: 0x22607, // polygon
	0x3b: 0x5a0f,  // text-decoration
	0x3d: 0xfd09,  // font-size
	0x3e: 0x1820c, // marker-start
	0x3f: 0x1cc0d, // color-profile
	0x40: 0x21406, // points
	0x41: 0x1150c, // font-stretch
	0x42: 0x10b0a, // stop-color
	0x43: 0x9d07,  // display
	0x44: 0x4201,  // x
	0x45: 0x1ff0b, // solid-color
	0x46: 0x3704,  // line
	0x48: 0x2d707, // version
	0x49: 0x1101,  // g
	0x4b: 0x6909,  // clip-rule
	0x4d: 0x2ab06, // switch
	0x4f: 0xeb07,  // opacity
	0x50: 0xbc13,  // color-interpolation
	0x51: 0x29c0c, // stroke-width
	0x52: 0x4d04,  // clip
	0x53: 0x2050f, // color-rendering
	0x54: 0x23506, // stroke
	0x55: 0x2c109, // direction
	0x56: 0x1c30e, // lighting-color
	0x57: 0x1301,  // y
	0x59: 0x12605, // style
	0x5a: 0x330e,  // baseline-shift
	0x5c: 0xad04,  // fill
	0x5d: 0xd60f,  // shape-rendering
	0x5f: 0x2560e, // stroke-linecap
	0x60: 0x24511, // stroke-dashoffset
	0x61: 0x2630b, // paint-order
	0x63: 0x2190d, // solid-opacity
	0x64: 0x2912,  // alignment-baseline
	0x65: 0x1e00b, // white-space
	0x66: 0x1eb07, // pattern
	0x67: 0x28e0e, // stroke-opacity
	0x68: 0x2fb0a, // visibility
	0x6a: 0x2de07, // viewBox
	0x6b: 0x700e,  // letter-spacing
	0x6c: 0xf20b,  // font-family
	0x6d: 0x7e10,  // contentStyleType
	0x6f: 0x1d01,  // a
	0x70: 0x701,   // d
	0x71: 0x26e0f, // stroke-linejoin
	0x72: 0x2e615, // viewport-fill-opacity
	0x74: 0x14f0f, // image-rendering
	0x76: 0xb60b,  // flood-color
	0x77: 0x1780a, // marker-mid
	0x78: 0x19107, // kerning
	0x7a: 0x1440b, // font-weight
	0x7b: 0x111a,  // glyph-orientation-vertical
	0x7e: 0xad09,  // fill-rule
	0x7f: 0xab02,  // y2
}
