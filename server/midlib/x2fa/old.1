
// n1TimeCodes_old will get all the info on a cow.
// Example: http://127.0.0.1:9019/api/x2fa/n1TimeCodes?api_table_key=kip.philip&tag=5234321412419
func n1TimeCodes_old(hdlr *X2faType, rw *goftlmux.MidBuffer, www http.ResponseWriter, req *http.Request, mdata map[string]string) {
	fmt.Printf("n1TimeCodes_old called\n")
	fmt.Fprintf(os.Stderr, "n1TimeCodes_old called\n")

	ps := &rw.Ps

	tag := ps.ByNameDflt("tag", "")

	stmt :=
		`select t1.*
			, t2."file_name"
			, t2."url_path"
			, t2."qr_id"
			, t2."qr_enc_id"
			, t2."state" as "qr_state"
		from "v1_trackAdd" as t1 left outer join "v1_avail_qr" as t2 on t1."qr_id" = t2."qr_enc_id"
		where "tag" = $1
		order by "ord_seq" desc
		`
	Rows, err := hdlr.gCfg.Pg_client.Db.Query(stmt, tag)
	if err != nil {
		fmt.Printf("Database error %s. stmt=%s data=[%s]\n", err, stmt, tag)
		fmt.Fprintf(www, `{"status":"error","msg":"database error: [%v]"}`, tag)
		return
	}

	defer Rows.Close()
	rowData, _, _ := sizlib.RowsToInterface(Rows)

	fmt.Fprintf(www, `{"status":"success","data":%s}`, godebug.SVarI(rowData))
}
	//	stmt :=
	//		`select t1.*
	//			, t2."file_name"
	//			, t2."url_path"
	//			, t2."qr_id"
	//			, t2."qr_enc_id"
	//			, t2."state" as "qr_state"
	//		from "v1_trackAdd" as t1 left outer join "v1_avail_qr" as t2 on t1."qr_id" = t2."qr_enc_id"
	//		`
	//	_ = stmt
	//
	//	ps := &rw.Ps
	//
	//	typ := ps.ByNameDflt("typ", "cow")
	//	dat := ""
	//	switch typ {
	//	case "cow":
	//		stmt += "where t1.\"tag\" = $1\norder by t1.\"tag\" asc\n"
	//		dat = ps.ByNameDflt("tag", "$err$")
	//	case "ranch":
	//		stmt += "where t1.\"ranch_name\" = $1\norder by t1.\"ranch_name\" asc\n"
	//		dat = ps.ByNameDflt("ranch", "$err$")
	//	case "locaiton":
	//		stmt += "where t1.\"location\" = $1\n"
	//		dat = ps.ByNameDflt("location", "$err$")
	//	case "premis_id", "site_id":
	//		stmt += "where t1.\"premis_id\" = $1\n"
	//		dat = ps.ByNameDflt("premis_id", "$err$")
	//	}
	//	if dat == "$err$" {
	//		fmt.Printf("Missing data\n")
	//		fmt.Fprintf(www, `{"status":"error","msg":"database error: [%s]"}`, "missing data")
	//		return
	//	}
	//
	//	Rows, err := hdlr.gCfg.Pg_client.Db.Query(stmt, dat)
	//	if err != nil {
	//		fmt.Printf("Database error %s. stmt=%s data=[%s]\n", err, stmt, dat)
	//		fmt.Fprintf(www, `{"status":"error","msg":"database error: [%v]"}`, err)
	//		return
	//	}
	//
	//	defer Rows.Close()
	//	rowData, _, _ := sizlib.RowsToInterface(Rows)
	//
	//	fmt.Fprintf(www, `{"status":"success","data":%s}`, godebug.SVarI(rowData))
/*
// Setup QR Redirect

	export QR_SHORT_AUTH_TOKEN="w4h0wvtb1zk4uf8Xv.Ns9Q7j8"
	wget -o out/,list1 -O out/,list2 \
		--header "X-Qr-Auth: ${QR_SHORT_AUTH_TOKEN}" \
		"http://t432z.com/upd/?url=http://test.test.com&id=5c"

	-- 1. DoGet - change to create a header
	-- 2. Example Call to set this
*/
func originalSetupFunc(hdlr *X2faType, rw *goftlmux.MidBuffer, www http.ResponseWriter, req *http.Request, mdata map[string]string) {
	fmt.Printf("originalSetupFunc called\n")
	fmt.Fprintf(os.Stderr, "originalSetupFunc called\n")

	ps := &rw.Ps

	bulk := ps.ByNameDflt("bulk", "")
	godebug.DbPfb(db1, "bulk: ->%s<-\n", bulk)
	var bulkData bulkDataType
	var err error

	godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)
	if bulk != "" {
		err = json.Unmarshal([]byte(bulk), &bulkData)
	} else {
		err = nil
		bulkData.Auth = ps.ByNameDflt("auth", "")
		bulkData.SiteId = ps.ByNameDflt("Site_id", "")
		bulkData.Row = append(bulkData.Row, bulkDataRow{
			Tag:   ps.ByNameDflt("Tag", ""),
			Note:  ps.ByNameDflt("Note", ""),
			SubId: ps.ByNameDflt("Sub_id", ""),
			Event: ps.ByNameDflt("Event", ""),
			Data:  ps.ByNameDflt("Data", ""),
			Date:  ps.ByNameDflt("Date", ""),
		})
	}
	if err != nil {
		godebug.DbPfb(db1, "%(Red)Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
			Status: "failed",
			Msg:    fmt.Sprintf("error - falied to supply needed data for processing [%s].", err),
		}))
		return
	}

	godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)
	if hdlr.AuthKey != "" && bulkData.Auth != hdlr.AuthKey {
		err = fmt.Errorf("Invalid auth key")
	}
	if err != nil {
		godebug.DbPfb(db1, "%(Red)Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
			Status: "failed",
			Msg:    fmt.Sprintf("error - falied to supply needed data for processing [%s].", err),
		}))
		return
	}

	godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)
	var rv bulkRvType
	statusVal := "success"

	fmt.Printf("Processing ->%s<-\n", godebug.SVarI(bulkData))

	hdlr.SetupValidEvents()
	for _, rr := range bulkData.Row {
		if _, ok := hdlr.validEvent[rr.Event]; !ok {
			rv.Detail = append(rv.Detail, bulkRvListType{
				Tag:        rr.Tag,
				SiteId:     bulkData.SiteId,
				SubId:      rr.SubId,
				ItemStatus: "error",
				Msg:        fmt.Sprintf("Invalid Event Type [%s]", rr.Event),
			})
			statusVal = "partial"
			err = nil
		} else {
			rv.Detail = append(rv.Detail, bulkRvListType{
				Tag:        rr.Tag,
				SiteId:     bulkData.SiteId,
				SubId:      rr.SubId,
				ItemStatus: "success",
			})
		}
	}

	godebug.DbPfb(db1, "%(Yellow)AT: %(LF)\n")
	fmt.Fprintf(os.Stdout, "rv = %s\n", godebug.SVarI(rv))
	for ii, rr := range bulkData.Row {
		godebug.DbPfb(db1, "%(Yellow)AT: %(LF)\n")
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Yellow)AT: %(LF)\n")
			if rr.Tag == "" && rr.SubId != "" {
				// Xyzzy100 - pull out Tag id or error -- If error set ItemStatus to...
				// Xyzzy - Call convSiteIDToTagId ( site_id, sub_id ) -> tagId, err
				// Xyzzy - if error ...
				rr.Tag, err = FindTagId(hdlr, bulkData.SiteId, rr.SubId)
			}
		}
		// xyzzy200
		qrId := ""
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
			// xyzzy104 - premis_id/animal_id etc.  // xyzzy - other params to pass! --
			qrId, err = hdlr.InsertTrackAdd(rr.Tag, rr.Note)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("%s", err)
				err = nil
			}
		}
		godebug.DbPfb(db1, "%(Cyan)AT: %(LF) qrId [%s]\n", qrId)
		if rv.Detail[ii].ItemStatus == "success" && qrId == "" {
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
			qrId, err = hdlr.PullQRFromDB(rr.Tag)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("%s", err)
				err = nil
			}
			// pull out/update preped - QR from d.b.
			// get the next avail QR code
			//  	1. pull from d.b.
			// 	 	2. update d.b. to mark as used.
			// 	 	(3 below). update row about animal to show use of QR.
		}
		if rv.Detail[ii].ItemStatus == "success" {
			// test QR setup on t432z.com - update the redirect for QR code
			ran := fmt.Sprintf("%d", rand.Intn(1000000000))
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF) ran [%v]\n", ran)
			cowData, err := hdlr.GetCowDisplayData(rr.Tag)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("Failed to set QR Redirect for - failed to get data for %s, error %s", qrId, err)
				err = nil
			} else {
				godebug.DbPfb(db1, "%(Cyan)AT: %(LF) ran [%v]\n", ran)
				// t432z.com - URL from config???
				status, body := DoGet("http://t432z.com/upd/", "url", hdlr.DisplayURL, "id", qrId, "data", cowData, "_ran_", ran)
				if status != 200 {
					statusVal = "partial"
					rv.Detail[ii].ItemStatus = "error"
					rv.Detail[ii].Msg = fmt.Sprintf("Failed to set QR Redirect for %s", qrId)
					err = nil
				} else {
					godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
					fmt.Printf("body ->%s<-\n", body)
				}
			}
		}
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
			// pull out/update preped - QR from d.b.
			// 	 	2. update d.b. to mark as used.
			// 	 	3. update row about animal to show use of QR.
			err = hdlr.UpdateAnimalWithQR(rr.Tag, qrId)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("%s", err)
				err = nil
			}
		}
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Green)AT: %(LF)\n")
		}
	}

	if err != nil {
		godebug.DbPfb(db1, "%(Red)Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
			Status: "failed",
			Msg:    "error - falied to supply needed data for processing.",
		}))
		return
	}

	if statusVal != "success" {
		rv.Status = statusVal
		godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(rv))
		return
	}

	fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
		Status: "success",
	}))
}
	// -----------------------------------------------
	// -----------------------------------------------
	// -----------------------------------------------
	// -----------------------------------------------
	// -----------------------------------------------

	bulk := ps.ByNameDflt("bulk", "")
	godebug.DbPfb(db1, "bulk: ->%s<-\n", bulk)
	var bulkData bulkDataType
	var err error

	godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)
	if bulk != "" {
		err = json.Unmarshal([]byte(bulk), &bulkData)
	} else {
		err = nil
		bulkData.Auth = ps.ByNameDflt("auth", "")
		bulkData.SiteId = ps.ByNameDflt("Site_id", "")
		bulkData.Row = append(bulkData.Row, bulkDataRow{
			Tag:   ps.ByNameDflt("Tag", ""),
			Note:  ps.ByNameDflt("Note", ""),
			SubId: ps.ByNameDflt("Sub_id", ""),
			Event: ps.ByNameDflt("Event", ""),
			Data:  ps.ByNameDflt("Data", ""),
			Date:  ps.ByNameDflt("Date", ""),
		})
	}
	if err != nil {
		godebug.DbPfb(db1, "%(Red)Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
			Status: "failed",
			Msg:    fmt.Sprintf("error - falied to supply needed data for processing [%s].", err),
		}))
		return
	}

	godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)
	if hdlr.AuthKey != "" && bulkData.Auth != hdlr.AuthKey {
		err = fmt.Errorf("Invalid auth key")
	}
	if err != nil {
		godebug.DbPfb(db1, "%(Red)Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
			Status: "failed",
			Msg:    fmt.Sprintf("error - falied to supply needed data for processing [%s].", err),
		}))
		return
	}

	godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)
	var rv bulkRvType
	statusVal := "success"

	fmt.Printf("Processing ->%s<-\n", godebug.SVarI(bulkData))

	hdlr.SetupValidEvents()
	for _, rr := range bulkData.Row {
		if _, ok := hdlr.validEvent[rr.Event]; !ok {
			rv.Detail = append(rv.Detail, bulkRvListType{
				Tag:        rr.Tag,
				SiteId:     bulkData.SiteId,
				SubId:      rr.SubId,
				ItemStatus: "error",
				Msg:        fmt.Sprintf("Invalid Event Type [%s]", rr.Event),
			})
			statusVal = "partial"
			err = nil
		} else {
			rv.Detail = append(rv.Detail, bulkRvListType{
				Tag:        rr.Tag,
				SiteId:     bulkData.SiteId,
				SubId:      rr.SubId,
				ItemStatus: "success",
			})
		}
	}

	godebug.DbPfb(db1, "%(Yellow)AT: %(LF)\n")
	fmt.Fprintf(os.Stdout, "rv = %s\n", godebug.SVarI(rv))
	for ii, rr := range bulkData.Row {
		godebug.DbPfb(db1, "%(Yellow)AT: %(LF)\n")
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Yellow)AT: %(LF)\n")
			if rr.Tag == "" && rr.SubId != "" {
				// Xyzzy100 - pull out Tag id or error -- If error set ItemStatus to...
				// Xyzzy - Call convSiteIDToTagId ( site_id, sub_id ) -> tagId, err
				// Xyzzy - if error ...
				rr.Tag, err = FindTagId(hdlr, bulkData.SiteId, rr.SubId)
			}
		}
		qrId := ""
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
			// xyzzy104 - premis_id/animal_id etc.  // xyzzy - other params to pass! --
			qrId, err = hdlr.InsertTrackAdd(rr.Tag, rr.Note)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("%s", err)
				err = nil
			}
		}
		godebug.DbPfb(db1, "%(Cyan)AT: %(LF) qrId [%s]\n", qrId)
		if rv.Detail[ii].ItemStatus == "success" && qrId == "" {
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
			qrId, err = hdlr.PullQRFromDB(rr.Tag)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("%s", err)
				err = nil
			}
			// pull out/update preped - QR from d.b.
			// get the next avail QR code
			//  	1. pull from d.b.
			// 	 	2. update d.b. to mark as used.
			// 	 	(3 below). update row about animal to show use of QR.
		}
		if rv.Detail[ii].ItemStatus == "success" {
			// test QR setup on t432z.com - update the redirect for QR code
			ran := fmt.Sprintf("%d", rand.Intn(1000000000))
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF) ran [%v]\n", ran)
			cowData, err := hdlr.GetCowDisplayData(rr.Tag)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("Failed to set QR Redirect for - failed to get data for %s, error %s", qrId, err)
				err = nil
			} else {
				godebug.DbPfb(db1, "%(Cyan)AT: %(LF) ran [%v]\n", ran)
				// t432z.com - URL from config???
				status, body := DoGet("http://t432z.com/upd/", "url", hdlr.DisplayURL, "id", qrId, "data", cowData, "_ran_", ran)
				if status != 200 {
					statusVal = "partial"
					rv.Detail[ii].ItemStatus = "error"
					rv.Detail[ii].Msg = fmt.Sprintf("Failed to set QR Redirect for %s", qrId)
					err = nil
				} else {
					godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
					fmt.Printf("body ->%s<-\n", body)
				}
			}
		}
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Cyan)AT: %(LF)\n")
			// pull out/update preped - QR from d.b.
			// 	 	2. update d.b. to mark as used.
			// 	 	3. update row about animal to show use of QR.
			err = hdlr.UpdateAnimalWithQR(rr.Tag, qrId)
			if err != nil {
				statusVal = "partial"
				rv.Detail[ii].ItemStatus = "error"
				rv.Detail[ii].Msg = fmt.Sprintf("%s", err)
				err = nil
			}
		}
		if rv.Detail[ii].ItemStatus == "success" {
			godebug.DbPfb(db1, "%(Green)AT: %(LF)\n")
		}
	}

	if err != nil {
		godebug.DbPfb(db1, "%(Red)Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
			Status: "failed",
			Msg:    "error - falied to supply needed data for processing.",
		}))
		return
	}

	if statusVal != "success" {
		rv.Status = statusVal
		godebug.DbPfb(db1, "%(Yellow)Partial Error [%s] AT: %(LF)\n", err)

		fmt.Fprintf(www, "%s", godebug.SVarI(rv))
		return
	}

	fmt.Fprintf(www, "%s", godebug.SVarI(bulkRvType{
		Status: "success",
	}))
