
//func respHandlerSRPRegister(ww http.ResponseWriter, req *http.Request)          {}
//func respHandlerSimulateEmailConfirm(ww http.ResponseWriter, req *http.Request) {}
//func respHandlerEmailConfirm(ww http.ResponseWriter, req *http.Request)         {}
//func respHandlerSRPLogin(ww http.ResponseWriter, req *http.Request)             {}
//func respHandlerSRPChallenge(ww http.ResponseWriter, req *http.Request)         {}
//func respHandlerSRPValidate(ww http.ResponseWriter, req *http.Request)          {}
//func respHandlerSRPGetNg(ww http.ResponseWriter, req *http.Request)             {}
//func respHandlerRecoverPasswordPt1(ww http.ResponseWriter, req *http.Request)   {}
//func respHandlerRecoverPasswordPt2(ww http.ResponseWriter, req *http.Request)   {}
//func respHandlerChangePassword(ww http.ResponseWriter, req *http.Request)       {}
//func respHandlerAdminSetPassword(ww http.ResponseWriter, req *http.Request)     {}
//func respHandlerSRPLogout(ww http.ResponseWriter, req *http.Request)            {}
//func respHandlerCipher(ww http.ResponseWriter, req *http.Request)               {}

	//	Init_Main = append(Init_Main, func(theMux *gogomux.MuxRouter) {
	//
	//		// OPEN - exact match
	//		theMux.HandleFunc("/api/srp_register", respHandlerSRPRegister).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_simulate_email_confirm", respHandlerSimulateEmailConfirm).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_email_confirm", respHandlerEmailConfirm).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_login", respHandlerSRPLogin).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_challenge", respHandlerSRPChallenge).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_validate", respHandlerSRPValidate).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_getNg", respHandlerSRPGetNg).Methods("GET")
	//		theMux.HandleFunc("/api/srp_recover_password_pt1", respHandlerRecoverPasswordPt1).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_recover_password_pt2", respHandlerRecoverPasswordPt2).Methods("GET", "POST")
	//
	//		// Login Required - exact match
	//		theMux.HandleFunc("/api/srp_change_password", respHandlerChangePassword).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_admin_set_password", respHandlerAdminSetPassword).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/srp_logout", respHandlerSRPLogout).Methods("GET", "POST")
	//		theMux.HandleFunc("/api/cipher", respHandlerCipher).Methods("GET", "POST")
	//		// xyzzy - admin disable account
	//		// xyzzy - admin enable account
	//
	//		if b, ok := GlobalCfg["srp_Bits"]; ok {
	//			tbits, err := strconv.ParseInt(b, 10, 64)
	//			if err == nil {
	//				Bits = int(tbits)
	//			}
	//		}
	//		if s, ok := GlobalCfg["srp_RegisterSendStatusOnError"]; ok {
	//			RegisterSendStatusOnError = sizlib.ParseBool(s)
	//		}
	//		if s, ok := GlobalCfg["srp_LoginSendStatusOnError"]; ok {
	//			LoginSendStatusOnError = sizlib.ParseBool(s)
	//		}
	//		if s, ok := GlobalCfg["srp_SendEmail"]; ok {
	//			SendEmail = sizlib.ParseBool(s)
	//		}
	//		if s, ok := GlobalCfg["srp_TestMode"]; ok {
	//			TestMode = sizlib.ParseBool(s)
	//		}
	//		if s, ok := GlobalCfg["srp_AdminPassword"]; ok {
	//			AdminPassword = s
	//		}
	//		if b, ok := GlobalCfg["srp_FailedLoginThreshold"]; ok {
	//			tt, err := strconv.ParseInt(b, 10, 64)
	//			if err == nil {
	//				FaileLoginThreshod = int(tt)
	//			}
	//		}
	//		if s, ok := GlobalCfg["srp_NewUserPrivs"]; ok {
	//			NewUserPrivs = s
	//		}
	//
	//	})

http://richardkho.com/making-ajax-calls-in-react-native/ -- Fetch 2nd param object

